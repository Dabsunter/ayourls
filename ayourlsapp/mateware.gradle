def version = "1.0"

println('+-+ +-+ +-+ +-+ +-+ +-+ +-+ +-+')
println(' M   A   T   E   W   A   R   E ')
println('+-+ +-+ +-+ +-+ +-+ +-+ +-+ +-+')
println('mateware Gradle script version ' + version)

println(name)
//if (file('mateware.properties').exists())



def matewarePropertyName = "mateware"

def matewarePropertyFile = matewarePropertyName+".properties"
def keyDebugStoreFile = "debugStoreFile"
def keyReleaseStoreFile = "releaseStoreFile"
def keyReleaseStorePassword = "releaseStorePassword"
def keyReleaseKeyAlias = "releaseKeyAlias"
def keyReleaseKeyPassword = "releaseKeyPassword"

def crashlyticsPropertyFile = matewarePropertyName+"-crashlytics.properties"
def keyCrashlyticsApiKey = "crashlyticsApiKey"
def keyCrashlyticsApiSecret = "crashlyticsApiSecret"


if (loadExtraProperties(matewarePropertyFile)) {
    if (project.ext.has(matewarePropertyName)) {
        if (loadExtraProperties(new File(project.ext[matewarePropertyName] as String, name + ".signing").getAbsolutePath())) {
            android {
                signingConfigs {
                    debug {
                        if (project.ext.has(keyDebugStoreFile)) {
                            storeFile new File(project.ext[matewarePropertyName] as String, project.ext[keyDebugStoreFile] as String)
                        }
                    }
                    release {
                        if (project.ext.has(keyReleaseStoreFile)) {
                            storeFile new File(project.ext[matewarePropertyName] as String, project.ext[keyReleaseStoreFile] as String)
                            if (project.ext.has(keyReleaseStorePassword))
                                storePassword project.ext[keyReleaseStorePassword]
                            if (project.ext.has(keyReleaseKeyAlias))
                                keyAlias project.ext[keyReleaseKeyAlias]
                            if (project.ext.has(keyReleaseKeyPassword))
                                keyPassword project.ext[keyReleaseKeyPassword]
                        }
                    }
                }
                buildTypes {
                    debug {
                        signingConfig signingConfigs.debug
                    }
                    release {
                        signingConfig signingConfigs.release
                    }
                }
            }
        }
        if (loadExtraProperties(new File(project.ext[matewarePropertyName] as String, crashlyticsPropertyFile).getAbsolutePath())) {
            if (project.ext.has(keyCrashlyticsApiKey) && project.ext.has(keyCrashlyticsApiSecret)) {
                def crashlyticsPropertiesFile = file('fabric.properties')
                if (!crashlyticsPropertiesFile.exists()) {
                    def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
                    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
                        entry(key: "apiSecret", value: project.ext[keyCrashlyticsApiSecret])
                        entry(key: "apiKey", value: project.ext[keyCrashlyticsApiKey])
                    }
                }
            }
        }
    } else {
        logger.error(matewarePropertyName + " property not found, add it to your module directory")
    }
}


def boolean loadExtraProperties(String fileName) {
    def file = file(fileName)
    println("Load properties: " + file.getAbsolutePath())
    if (file.exists()) {
        def props = new Properties()
        props.load(file.newDataInputStream())
        props.each {
            //println(it.key + "=" + it.value)
            project.ext.set(it.key, it.value)
        }
        return true;
    } else {
        logger.error("file not found: " + fileName)
    }
    return false;
}

